import cv2
import numpy as np

def ORB_detector(new_image,image_template):
    # Function that compares input image to the template
    # It then returns number of ORB matches between them
    image1=cv2.cvtColor(new_image,cv2.COLOR_BGR2GRAY)
    
    # Create ORB detector with 1000 keypoints with a scaling pyramid factor of 1.2
    orb=cv2.ORB(1000,1.2)
    
    # Detector keypoints of original image
    (kp1,des1)=orb.detectAndCompute(image1,None)
    
    # Detect keypoints of rotated image
    (kp2,des2)=orb.detectAndCompute(image_template,None)
    
    # Create a matcher
    bf=cv2.BFMatcher(cv2.NORM_HAMMING,crossCheck=True)
    
    # Do matching
    matches=bf.match(des1,des2)
    
    # Sort the matches based on distance
    matches=sorted(matches,key=lambda val:val.distance)
    
    return(len(matches))

cap=cv2.VideoCapture(-1)
 
# Load our template image
image_template=cv2.imread("image1.jpeg",0)

while True:
    # Get webcam images
    ret,frame=cap.read()
    
    # Get height and width of webcam frame
    #height,width=frame.shape[:2]
    width  = cap.get(3) # float
    height = cap.get(4) # float

    # Define ROI Box dimensions 
    top_left_x=int(width/3)
    top_left_y=int((height/2)+(height/4))
    bottom_right_x=int((width/3)*2)
    bottom_right_y=int((height/2)-(height/4))
    
    # Draw rectangular window for our region of interest
    cv2.rectangle(frame,(top_left_x,top_left_y), (bottom_right_x, bottom_right_y),255,3)
    
    # Crop window of observation we defined above
    cropped=frame[bottom_right_y:top_left_y, top_left_x:bottom_right_x]
    
    # Flip frame orientation horizontally
    frame = cv2.flip(frame,1)
    
    # Get number of ORB matches
    matches=ORB_detector(cropped,image_template)
    
    # Display status string showing the current number of matches
    output_string="Matches"+ str(matches)
    cv2.putText(frame,output_string,(50,450),cv2.FONT_HERSHEY_COMPLEX,2,(250,0,150),2)
    
    # Our threshold to indicate object detection
    threshold=350
    
    # if matches exceed our threshold then object has been detected
    if matches>threshold:
        cv2.rectangle(frame,(top_left_x,top_left_y),( bottom_right_x, bottom_right_y),(0,255,0),3)
        cv2.putText(frame,"Object Found",(50,450),cv2.FONT_HERSHEY_COMPLEX,2,(0,255,0),2)
        
    cv2.imshow("Object Detection",frame)
    if cv2.waitKey(1)==13:
        break
cv2.release()
cv2.destroyAllWindows()

    

